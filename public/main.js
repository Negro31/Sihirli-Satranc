console.log("main.js yÃ¼klendi âœ…");

const socket = io();
let roomId = null;
let game = null;
let board = null;
let color = null; // "white" veya "black"

const statusEl = document.getElementById("status");
const logEl = document.getElementById("log");

function log(msg) {
  logEl.innerHTML = msg + "<br>" + logEl.innerHTML;
}

// ðŸŽ® Oda oluÅŸtur
document.getElementById("createBtn").addEventListener("click", () => {
  roomId = document.getElementById("roomId").value || "room" + Math.floor(Math.random() * 1000);
  const name = document.getElementById("name").value || "Player";

  socket.emit("createRoom", { roomId, name });
});

// ðŸŽ® Odaya katÄ±l
document.getElementById("joinBtn").addEventListener("click", () => {
  roomId = document.getElementById("roomId").value;
  const name = document.getElementById("name").value || "Player";

  if (!roomId) {
    alert("LÃ¼tfen oda ID gir veya yeni bir oda oluÅŸtur!");
    return;
  }

  socket.emit("joinRoom", { roomId, name });
});

// ðŸ”Œ BaÄŸlantÄ±lar
socket.on("connect", () => {
  statusEl.innerText = "Sunucuya baÄŸlanÄ±ldÄ± âœ…";
});

socket.on("roomCreated", d => {
  statusEl.innerText = `Oda oluÅŸturuldu: ${d.roomId}`;
  log("Oda baÅŸarÄ±yla oluÅŸturuldu: " + d.roomId);
  color = "white"; // OdayÄ± kuran beyaz olsun
});

socket.on("waiting", d => {
  statusEl.innerText = d.message;
});

socket.on("gameStart", d => {
  statusEl.innerText = d.message;
  log("Oyun baÅŸladÄ±!");

  if (!color) color = "black"; // Sonradan giren siyah olur

  startChessGame();
});

socket.on("roomFull", () => {
  alert("Oda dolu!");
});

socket.on("playerLeft", d => {
  log("Oyuncu ayrÄ±ldÄ±: " + d.id);
});

// â™Ÿ SatranÃ§ baÅŸlat
function startChessGame() {
  game = new Chess();

  board = Chessboard("board", {
    draggable: true,
    position: "start",
    orientation: color,
    onDrop: onDrop
  });
}

// â™Ÿ TaÅŸ sÃ¼rÃ¼klenip bÄ±rakÄ±ldÄ±ÄŸÄ±nda
function onDrop(source, target) {
  if (!game || game.turn() !== color[0]) {
    return "snapback";
  }

  let move = game.move({ from: source, to: target, promotion: "q" });

  if (move === null) return "snapback";

  board.position(game.fen());

  socket.emit("move", { roomId, move });
}

// â™Ÿ Rakip hamle yaptÄ±ÄŸÄ±nda
socket.on("move", data => {
  game.move(data.move);
  board.position(game.fen());
});
